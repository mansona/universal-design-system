Universal Design System the Ember Way

Hi everyone, my name is chris manson and I’m here to talk to you about “Universal Design Systems the Ember Way”. Don’t worry, I know that name is a little different from what is on the schedule, that’s just because the other name was a bit too long to fit on this slide and I didn’t want to have to mess with it.

This is me, along with a bunch of my socials and where you can find me across the internet. You'll see that I'm pretty much real_ate everywhere apart from github, so if anyone knows anybody in github that might be convinced to allow underscores in usernames then let me know. This little fella here is one of my side-kicks, Rodney. Since I’ve last been speaking in-person at a confernece a lot has changed in the wider world but I have also aquired 3 extra side-kicks! My pandemic pup Suzie with the good smile, and I have two daughters now! How did that happen!?

I have to say this is a bit of a strange experience being in front of people speaking again, the last time I was preparing myself for this was when I was prepping my talk for EmberConf 2020 and instead of travelling to Portland and experiencing the nerves I needed to setup a micro recoding studio to record my talk in a white void.

pic of me in the void

But it’s good to be back, even if we need to be at a distance.

So back to the reason I’m standing up her, I’m here to talk to you all about using Ember to bulid a universal design system. It’s probably a good idea to start off talking about what a design system actually is (or really define what it’s going to be for the next 20 mins while you’re listening to me because I don’t think I could come up with a univeresal definition) and then I’ll eplain what I mean by a universal design system and why you would do something so silly as to build that in Embere.

So, since I can do this with a real audience I’m going to do it! How many people here know what I mean by a design system? ok great that is a good number of hands up! there are a few uncertain hands... so lets try this then: how many of you would say that a design system isn’t a design system if it doesn’t provide you ready made components to use in your applications? ah yes, fewer hands but as you can see it’s not all agreemnet in the room of what exactly goes into a design system

So let’s go through some definitions that I found online, and then a few examples of design systems to see if we can get on the same page before I get into the meat of the talk. and hopefully there will be a few more certain hands up by the end of this half hour!

So let’s go through some definitions I found across the internet:

> A design system is a complete set of standards intended to manage design at scale ... <cite>https://www.nngroup.com/articles/design-systems-101/</cite>

that seems a little bit vague to me... let’s see what else we have here

> a design system is a collection of documents, articles, examples, code snippets, screenshots, design guidelines, components, philosophies and other digital assets for a product design company <cite>https://designerup.co/blog/10-best-design-systems-and-how-to-learn-and-steal-from-them/</cite>

they were doing so well until that last line. Why should it only bee for a product design compoany!? should it be for anybody doing anything right?

anyway lets try again.

> A Design System is a systematic approach to product development — complete with guidelines, principles, philosophies, and code <cite>https://rangle.io/blog/what-is-a-design-system/</cite>

That’s interesting. I like that last one the best. The word that jumps out at me from that definition is **systeematic** and I think that gets to the escense of what I think a design system is. 

They also have another paragraph on that same blog that neatly brings us onto the next point I want to make about design systems:

> There’s a common misconception that a Design System is just a Style Guide or a Component Library [...] in our opinion, those are both sub-components of a Design System. <cite>https://rangle.io/blog/what-is-a-design-system/</cite>

Who here pictured something like a componant library when I asked about design systems? And by component library I mean something like storybook that neatly lays out all of your components and if you’re lucky might even document how to use each component. What I have found is that if you’re using a component library you don’t often get much of a narative on how to think about your design and help you approach the problem.

This is something that I strongly believe in, sure you could be given a set of componnts and some docs about their api but that doesn’t teach you how to think about design for whatever it is you’re building. You need a narative to get you thinking in the same way as your colleagues or the people who are working on the design itself.

I also happen to believe that the documentation should be easy for anyone to contribute to, regardless of what team you’re in. But I might say a little more about that later!

So let’s have a look at some of the public design systems out there and see if they end up feeling like Component libraries or something more systematic.

5 mins 50 seconds to here

When doing my resarch on existing design systems I found a few interesting lists to look through. This one https://designsystemsrepo.com/design-systems/ is a literal A-Z of over 100 design systems! A resource that is too vast for anyone with 2 kids under two to ever make a dent on researching!

Then I found https://www.designsystems.com/open-design-systems/ which seemed to give me design systems with stats on likes and downloads (but oddly no way to sort them). But there was something funny going on here, I couldn’t see some of the large design systems that I know of like Material Design from Google or Polaris from Shopify. Then I look a tiny bit closer and these are only **figma** “design systems”. I won’t open the can of worms that is writing a “design system” in Figma right now, I’ll save that for the happy hour or if anyone watching wants to chat about it hit me up on twitter.

A bit more research lead me to this great blog post on “designerup” https://designerup.co/blog/10-best-design-systems-and-how-to-learn-and-steal-from-them/

At least we can now limit our search a bit and focus on what these folks call the “best 10 design systems”. Some of these you might have heard about already: Material design from google, Polaris from Shopify, Carbon from IBM.

These design systems are all so extensive that you could speend hours digging into them, each of thme have different types of content all pointing you in different directions on how to think, but there are some comonalities. Most of them Talk about Typeography and Colours, some of them talk about Icons, and a few of them even talk about animation and illustration. This is clearly not a very exaustive list but I find it interesting to see what common themes crop up when trying to compare.

The one thing that you will notice is that every single one of these sites are **HUGE** and contain a lot of text. You will probably have to take a university-level course to fully understand any of these in great depth instead of just dipping in and out looking for specific things. So I thought, aren’t there any smaller design systems that could still be considered “comprehensive”?

I did a quick search online and I couldn’t find anyone claiming to be the Smallest Design System, so I made it! tinydesignsystem.com is live and is now officially the smallest public design system in the world. No it’s not in progress, it’s totally finished and that’s how it’s supposed to look. The only rule in this design system is “Use only HTML with no CSS styling”. what do we think? is that actually a design system? if not why not? going back to our defintion from before, it’s a systematic approach to product development. if ever you feel like you want to use some styles then don’t! simple yet effective rule.

Of course this is me being facecious, I don’t actually recommend trying to build the next big silocone valley startup using tiny design system. Your users might not like it and you will probably stuggle to get much investmeent. BUt it does searve as a good extreme case that helps us to think about the definition of design systems.

So what if wanted to expand on this tinydesignsystem? what if we wanted to make something like, I don’t know, mediumdesignsystem.com? how would we go about it? looking at the design systems examples so far we know at least onee thing is true, we need soomething that is useful for writing a lot of text. I also don’t want to be thee only one writing this thing beecause, truth be told I’m not much of a designer. I want to build my intermediate design system out-in-the open using a tool that is specifically designed to be a simple as possible to add documentation.

I think I might have a tool for that!

Enter, Field Guide :tada:

This is yet another Empress project, so anyone who has seen me talk before knows the drill. For anything empress you have a quick-start and a super-quick start that can get you up and running really quickly. I want to make this more about the documenetation so I’m going to try to set this up withotu any command line because that might be a bit tricky for someone who isn’t used to the modern web and command lines and build systems. Or to say that a different way, I don’t want lack of experience in that side of things to be a blocker to use this tool. So let’s set it up with our Super Quick Start button.

Video

What you end up with is an Ember addon with a neat little docs folder that just has a bunch of markdown in it. But, this is still quite a lot of files for someone that first of all doesn’t really know that we want an ember addon to use field guide or what most of these files do... can we do any better? Can we make it a bit slimmer?

Lets try this other super-secret netlify button and see what happens!

Same output of a docs foldere, but what’s this! where have all my ember files gone! This particular example is using a little research project of mine called bottled-ember. The goal is to make it possible to run my empress apps with as few ember-specific files in the repo as possible. I haven’t been able to kill all the files, apparenetly tests/dummy/config/environment can’t be passed in the tests tree to ember-cli but I know there are at least 3 people at this conference that could help me fix the last few issues with it :joy: and I will find you, and I will ask for your help.

Picture of taken

anyway I digress! now all you need ot do is write your documenetation in your docs foolder, writing using markdown with code examples as you would usually do with markdown. No special syntax needed

We should start with some introduction about the design system that we want to write, give some context about how we actually want to build our styles and the motivation of what we’re doing.... but do you know what. instead of me starting from scratch here, let’s use a design system that I’ve actually already worked on and most of the people in this room should be at least a bit familiar with some sites that make use of it! The eember styleguie

photo

The ember styleguide is already using field-guide so it should give us a great starting point to copy from. It was originally written many moons ago as collection of comopnents that were common to all of the ember apps that the Ember learning team were in charge of. It then evolved to be a somewhat aspirational declaration of components that we would like to use in our apps, but thre was never a real push to make it the predominatn definition of all styles across the ember “brand”. But then two things happeneed at the same time. We finally got the Ember Website Redesign RFC across the line and Ember Octane was becoming a thing! Do we all remember that? Ember octane was yet anothre upgrade for peoeple that have ebeen using Ember for a Decade but it actually represneteed something subtly different for non-ember or even non-JavaScript devs - a much easier learning curve.

With Ember Octane the js file suddenly became optional, and with our amazing new angle bracket syntax you could look at an Ember tmeplate and by just squinting a little bit you could see syntax that might feel familiar to designers that have experience with HTML and that are sick of looking at JSX or strange templating systems with special attributes all over the place

Why is this even useful? Well remember that I said you could write your documentation in Markdown? How many of you knew that html is valid in a Markdown document? Not only can you drop any arbitrary HTML in a markdown file and it will render just fine, If you’re using Field Guide you can even make use of or “almost html” Ember components in your documents

(Show the colour documentation thingy with a11y comments)

This is a nice little example because not only does it show our colour and some details about it, you can also see how our text scales and text colours will fair on it in terms of accessibility. Which is super useful if you’re coming to the design system looking for a colour that you can use.

Now that we’re in the mood for thinking about HTML, why don’t we try to  build most of your design system just using HTML and CSS. Sure if you’re using Ember you can still use Ember Components all over the place, but if you focus on HTML and CSS this is really the core of the Universal Design System that I wanted to talk about. It doesn’t matter what framework or mad modern technology to build for the web you’re using, everything that you render will ultimately end up as HTML in the dom so if we can build our system with that in mind then technically we should be able to use it in any application no matter the framework.

What do I mean by all this “focus on HTML and CSS” anyway? While working on thee ember styleguide one of my favourite achivements was the “Background Shapes” concept. If you look at the documentation over there you won’t see a single Ember component. This is truely HTML-first, and that doesn’t mean that it needs to be declarative and dumb. If you use hte `bg-shape-boxes-bottom ` class you get this neat little spill over into the next div without having to think about it.

This is how I imagine the sweet spot of design system develeopment. A set of markdown files with very little seromony around writing them. A collection of CSS since we’re designing for the web here, and some html snippeets in the docs that show you exactly what they look like.

but that only deals with the writing of the doc. Now that we have the perfect design system docs including all the CSS that we will need. How do I actually consume this **universal** system? Let’s go through it together with an example

So I said that I didn’t want to writ emy own design system for this talk and i would just use the ember-styleguide, but I have already used my super secret Netlify QuickStart button and I want to use my super slimmed down repo, so I copied across all most of the files from ember-styleguide and I have renameed the project eember-slimguide. I’ve also just removed all the components from the documentation and made sure it’s only using HTML snippets. This means that the only driving force of everything you see in this documentation is HTML and CSS.

So far we haven’t done anything all that special. The true magic happens when we want to deploy this new thing. I’m going to deploy it to npm because that’s where all the cool kids put their stuff these days. But instead of just depeloying it as an ember addon like the styleguide is already, let’s make use of the one weird trick that makes your design system ember addon a usiversal npm package.

“prepublishOnly”: “rm -rf dist && npm run build”

Who here knows what `prepublishonly` actually does? It’s a neat trick that makes sure that you run this whenever you’re in the process of publishing your package to npm. The reason it’s called “prepublishonly” and not just “prepublish” is because of some legacy npm issues where that hook used to also be called on install which is just silly. I don’t think it’s a problem for `npm@7` any more but I guess it’s force of habit that I still use this one.

now when you publish your repo to npm it also runs `npm run build` which compiles your css into a vendor.css in the dist/asseets folder.

So you can either consume this package now using npm if you already have an npm based pipeline, or you could just be old school and link that file directly in your html using another “one weird trick”. How many people here know about unpkg? It’s a great CDN that allows you to access a single file in an npm package directly. And if you can access a single file then you can link to that single file.

Remember our tiny design system? I know that the whole point of that design system is to use no CSS, but why not live a little dangerously.

With one very small change to both the index files here (I had to change 2 files because this doesn’t actually use any build system and is just two static html files) I link the CSS and apply the “container” class somewhere.

And this is the result

I don’t know about you but that seems pretty universal to me if it can be used in a no-framework situation.

So what do I want you to take away from this talk. Personally I would like loads of people to try out field-guide, it’s being in production for the ember-styleguide for a very long time now and I know I’m a bit biased but I think it’s pretty useful. We have some interesting changes coming soon, that are less design-system related and more about field-guides’s secondary goal: as a wholesale replacement for ember-cli-addon-docs. But that will have to be a story for another talk.

Thank you everyone for listening. As I said at the beginning you can find me on all these places, most recently I have been streaming my open source development live on twitch on a Thursday morning. I had to skip this week because I had another engagement but I would love for you all to join me for a stream sometime.

If you have any questions you can reach out to me on twitch or on the Ember Discord, or as I said we can natter at the happy hour later tonight too.

Thanks
